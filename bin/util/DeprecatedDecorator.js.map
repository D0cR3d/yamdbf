{"version":3,"sources":["util/DeprecatedDecorator.ts"],"names":[],"mappings":";;AAAA,4CAAyC;AAEzC;;;;;GAKG;AACH,oBAA+C,OAAgB;IAE9D,MAAM,CAAC,UAAS,MAAS,EAAE,GAAW,EAAE,UAA8B;QAErE,EAAE,CAAC,CAAC,CAAC,UAAU,CAAC;YAAC,UAAU,GAAG,MAAM,CAAC,wBAAwB,CAAC,MAAM,EAAE,GAAG,CAAC,CAAC;QAC3E,MAAM,QAAQ,GAAQ,UAAU,CAAC,KAAK,CAAC;QACvC,MAAM,MAAM,GAAW,eAAM,CAAC,QAAQ,CAAC,aAAa,CAAC,CAAC;QACtD,UAAU,CAAC,KAAK,GAAG,UAAS,GAAG,IAAW;YAEzC,MAAM,CAAC,IAAI,CAAC,OAAO,IAAI,GAAG,MAAM,CAAC,WAAW,CAAC,IAAI,IAAI,GAAG,2DAA2D,CAAC,CAAC;YACrH,MAAM,CAAC,QAAQ,CAAC,KAAK,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC;QACnC,CAAC,CAAC;QACF,MAAM,CAAC,UAAU,CAAC;IACnB,CAAC,CAAC;AACH,CAAC;AAdD,gCAcC","file":"DeprecatedDecorator.js","sourcesContent":["import { Logger } from './logger/Logger';\n\n/**\n * Logs a deprecation warning for the decorated class method\n * whenever it is called\n * @param {string} [message] Method deprecation message\n * @returns {MethodDecorator}\n */\nexport function deprecated<T extends Function>(message?: string): MethodDecorator\n{\n\treturn function(target: T, key: string, descriptor: PropertyDescriptor): PropertyDescriptor\n\t{\n\t\tif (!descriptor) descriptor = Object.getOwnPropertyDescriptor(target, key);\n\t\tconst original: any = descriptor.value;\n\t\tconst logger: Logger = Logger.instance('Deprecation');\n\t\tdescriptor.value = function(...args: any[]): any\n\t\t{\n\t\t\tlogger.warn(message || `${target.constructor.name}#${key}() is deprecated and will be removed in a future release.`);\n\t\t\treturn original.apply(this, args);\n\t\t};\n\t\treturn descriptor;\n\t};\n}\n"],"sourceRoot":"../../src"}