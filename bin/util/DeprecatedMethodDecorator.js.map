{"version":3,"sources":["util/DeprecatedMethodDecorator.ts"],"names":[],"mappings":";;AAEA;;;;;GAKG;AACH,0BAAqD,GAAG,aAAoB;IAE3E,IAAI,OAAQ,gBAAwB,CAAC,SAAS,KAAK,WAAW;QAAG,gBAAwB,CAAC,SAAS,GAAG,EAAE,CAAC;IACzG,MAAM,SAAS,GAAgC,gBAAwB,CAAC,SAAS,CAAC;IAClF,IAAI,OAAO,GAAW,aAAa,CAAC,CAAC,CAAC,CAAC;IAEvC,gCAAgC,OAAe;QAE9C,IAAI,SAAS,CAAC,OAAO,CAAC;YAAE,OAAO;QAC/B,SAAS,CAAC,OAAO,CAAC,GAAG,IAAI,CAAC;QAC1B,OAAO,CAAC,WAAW,CAAC,OAAO,EAAE,oBAAoB,CAAC,CAAC;IACpD,CAAC;IAED,IAAI,OAAO,OAAO,KAAK,QAAQ,EAC/B;QACC,MAAM,CAAC,MAAM,EAAE,GAAG,CAAC,GAAqB,aAAoB,CAAC;QAC7D,OAAO,GAAG,KAAK,MAAM,CAAC,WAAW,CAAC,IAAI,IAAI,GAAG,4DAA4D,CAAC;QAC1G,sBAAsB,CAAC,OAAO,CAAC,CAAC;KAChC;SAED;QACC,OAAO,UAAS,MAAS,EAAE,GAAW,EAAE,UAA8B;YAErE,IAAI,CAAC,UAAU;gBAAE,UAAU,GAAG,MAAM,CAAC,wBAAwB,CAAC,MAAM,EAAE,GAAG,CAAC,CAAC;YAC3E,MAAM,QAAQ,GAAQ,UAAU,CAAC,KAAK,CAAC;YACvC,UAAU,CAAC,KAAK,GAAG,UAAS,GAAG,IAAW;gBAEzC,sBAAsB,CAAC,OAAO,CAAC,CAAC;gBAChC,OAAO,QAAQ,CAAC,KAAK,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC;YACnC,CAAC,CAAC;YACF,OAAO,UAAU,CAAC;QACnB,CAAC,CAAC;KACF;AACF,CAAC;AAjCD,4CAiCC","file":"DeprecatedMethodDecorator.js","sourcesContent":["export function deprecatedMethod(message: string): MethodDecorator;\nexport function deprecatedMethod<T>(target: T, key: PropertyKey): void;\n/**\n * Logs a deprecation warning for the decorated class method\n * if it is called within the current process\n * @param {string} [message] Method deprecation message\n * @returns {MethodDecorator}\n */\nexport function deprecatedMethod<T extends Function>(...decoratorArgs: any[]): any\n{\n\tif (typeof (deprecatedMethod as any).warnCache === 'undefined') (deprecatedMethod as any).warnCache = {};\n\tconst warnCache: { [key: string]: boolean } = (deprecatedMethod as any).warnCache;\n\tlet message: string = decoratorArgs[0];\n\n\tfunction emitDeprecationWarning(warning: string): void\n\t{\n\t\tif (warnCache[warning]) return;\n\t\twarnCache[warning] = true;\n\t\tprocess.emitWarning(warning, 'DeprecationWarning');\n\t}\n\n\tif (typeof message !== 'string')\n\t{\n\t\tconst [target, key]: [T, PropertyKey] = decoratorArgs as any;\n\t\tmessage = `\\`${target.constructor.name}#${key}()\\` is deprecated and will be removed in a future release`;\n\t\temitDeprecationWarning(message);\n\t}\n\telse\n\t{\n\t\treturn function(target: T, key: string, descriptor: PropertyDescriptor): PropertyDescriptor\n\t\t{\n\t\t\tif (!descriptor) descriptor = Object.getOwnPropertyDescriptor(target, key);\n\t\t\tconst original: any = descriptor.value;\n\t\t\tdescriptor.value = function(...args: any[]): any\n\t\t\t{\n\t\t\t\temitDeprecationWarning(message);\n\t\t\t\treturn original.apply(this, args);\n\t\t\t};\n\t\t\treturn descriptor;\n\t\t};\n\t}\n}\n"],"sourceRoot":"../../src"}