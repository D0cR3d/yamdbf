{"version":3,"sources":["storage/GuildSettings.ts"],"names":[],"mappings":";;AAAA,mEAAgE;AAIhE,kDAA+C;AAE/C;;;;;;;;;GASG;AACH,mBAA2B,SAAQ,6CAAqB;IAIvD,YAAmB,MAAc,EAAE,KAAY,EAAE,OAAwB;QAExE,KAAK,CAAC,OAAO,EAAE,KAAK,CAAC,EAAE,CAAC,CAAC;QACzB,IAAI,CAAC,OAAO,GAAG,MAAM,CAAC;IACvB,CAAC;IAED;;;OAGG;IACI,KAAK,CAAC,IAAI;QAEhB,IACA,CAAC;YACA,MAAM,KAAK,CAAC,IAAI,EAAE,CAAC;YACnB,IAAI,IAAI,GAAQ,IAAI,CAAC,KAAK,CAAC,MAAM,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC;YAEhE,MAAM,QAAQ,GAAQ,MAAM,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,GAAG,CAAC,sBAAsB,CAAC,CAAC;YAC7E,GAAG,CAAC,CAAC,MAAM,GAAG,IAAI,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;gBACvC,EAAE,CAAC,CAAC,OAAO,IAAI,CAAC,GAAG,CAAC,KAAK,WAAW,CAAC;oBAAC,IAAI,CAAC,GAAG,CAAC,GAAG,QAAQ,CAAC,GAAG,CAAC,CAAC;YAEjE,MAAM,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,IAAI,CAAC,IAAI,EAAE,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC,CAAC;YAE1D,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC;QACpB,CAAC;QACD,KAAK,CAAC,CAAC,GAAG,CAAC,CACX,CAAC;YACA,eAAM,CAAC,QAAQ,EAAE,CAAC,KAAK,CAAC,eAAe,EAAE,GAAG,CAAC,KAAK,CAAC,CAAC;QACrD,CAAC;IACF,CAAC;CACD;AAlCD,sCAkCC","file":"GuildSettings.js","sourcesContent":["import { SharedProviderStorage } from './SharedProviderStorage';\nimport { Guild } from 'discord.js';\nimport { StorageProvider } from './StorageProvider';\nimport { Client } from '../client/Client';\nimport { Logger } from '../util/logger/Logger';\n\n/**\n * Class containing asynchronous methods for storing, retrieving, and\n * interacting with settings for a specific guild. Will be contained\n * under {@link GuildStorage#settings}\n * @borrows SharedProviderStorage#keys as GuildSettings#keys\n * @borrows SharedProviderStorage#get as GuildSettings#get\n * @borrows SharedProviderStorage#set as GuildSettings#set\n * @borrows SharedProviderStorage#remove as GuildSettings#remove\n * @borrows SharedProviderStorage#clear as GuildSettings#clear\n */\nexport class GuildSettings extends SharedProviderStorage\n{\n\tprivate readonly _client: any;\n\n\tpublic constructor(client: Client, guild: Guild, storage: StorageProvider)\n\t{\n\t\tsuper(storage, guild.id);\n\t\tthis._client = client;\n\t}\n\n\t/**\n\t * Initialize this storage instance\n\t * @returns {Promise<void>}\n\t */\n\tpublic async init(): Promise<void>\n\t{\n\t\ttry\n\t\t{\n\t\t\tawait super.init();\n\t\t\tlet data: any = JSON.parse(await this._provider.get(this._key));\n\n\t\t\tconst defaults: any = await this._client.storage.get('defaultGuildSettings');\n\t\t\tfor (const key of Object.keys(defaults))\n\t\t\t\tif (typeof data[key] === 'undefined') data[key] = defaults[key];\n\n\t\t\tawait this._provider.set(this._key, JSON.stringify(data));\n\n\t\t\tthis._cache = data;\n\t\t}\n\t\tcatch (err)\n\t\t{\n\t\t\tLogger.instance().error('GuildSettings', err.stack);\n\t\t}\n\t}\n}\n"],"sourceRoot":"../../src"}