{"version":3,"sources":["storage/SharedProviderStorage.ts"],"names":[],"mappings":"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","file":"SharedProviderStorage.js","sourcesContent":["import { StorageProvider } from './StorageProvider';\nimport { Util } from '../util/Util';\nimport { Logger } from '../util/logger/Logger';\n\n/**\n * Simple async key/value storage abstraction operating on top\n * of a single key within the given StorageProvider instance.\n * As the name suggests, the given StorageProvider instance\n * can be shared between multiple SharedProviderStorage instances\n *\n * >Supports nested object paths in get/set/remove using `.`\n * like normal object accessors\n *\n * >**Note:** The storage provider given to the constructor should\n * already be initialized via its `init()` method\n */\nexport class SharedProviderStorage\n{\n\tprotected readonly _provider: StorageProvider;\n\tprotected readonly _key: string;\n\tprotected _cache: { [key: string]: any };\n\n\tpublic constructor(storage: StorageProvider, key: string)\n\t{\n\t\tthis._provider = storage;\n\t\tthis._key = key;\n\t\tthis._cache = {};\n\t}\n\n\t/**\n\t * Initialize this storage instance\n\t * @returns {Promise<void>}\n\t */\n\tpublic async init(): Promise<void>\n\t{\n\t\ttry\n\t\t{\n\t\t\tlet data: any = await this._provider.get(this._key);\n\t\t\tif (typeof data === 'undefined')\n\t\t\t{\n\t\t\t\tdata = {};\n\t\t\t\tawait this._provider.set(this._key, JSON.stringify(data));\n\t\t\t}\n\t\t\telse data = JSON.parse(data);\n\n\t\t\tthis._cache = data;\n\t\t}\n\t\tcatch (err) { Logger.instance().error('SharedProviderStorage', err.stack); }\n\t}\n\n\t/**\n\t * Get the names of all keys in this storage for this instance\n\t * @returns {Promise<string[]>}\n\t */\n\tpublic async keys(): Promise<string[]>\n\t{\n\t\treturn Object.keys(this._cache);\n\t}\n\n\t/**\n\t * Get a value from storage for this instance\n\t * @param {string} key The key in storage to get\n\t * @returns {Promise<any>}\n\t */\n\tpublic async get(key: string): Promise<any>\n\t{\n\t\tif (typeof key === 'undefined') throw new TypeError('Key must be provided');\n\t\tif (typeof key !== 'string') throw new TypeError('Key must be a string');\n\n\t\tif (key.includes('.'))\n\t\t{\n\t\t\tlet path: string[] = key.split('.');\n\t\t\treturn Util.getNestedValue(this._cache[path.shift()], path);\n\t\t}\n\t\telse return this._cache[key];\n\t}\n\n\t/**\n\t * Check if a value exists in storage for this instance\n\t * @param {string} key The key in storage to check\n\t * @returns {Promise<boolean>}\n\t */\n\tpublic async exists(key: string): Promise<boolean>\n\t{\n\t\treturn typeof await this.get(key) !== 'undefined';\n\t}\n\n\t/**\n\t * Set a value in storage for this instance\n\t * @param {string} key The key in storage to set\n\t * @param {any} value The value to set\n\t * @returns {Promise<void>}\n\t */\n\tpublic async set(key: string, value: any): Promise<void>\n\t{\n\t\tif (typeof key === 'undefined') throw new TypeError('Key must be provided');\n\t\tif (typeof key !== 'string') throw new TypeError('Key must be a string');\n\t\tif (typeof value === 'undefined') throw new TypeError('Value must be provided');\n\n\t\ttry { JSON.stringify(value); }\n\t\tcatch { value = {}; }\n\n\t\tif (key.includes('.'))\n\t\t{\n\t\t\tlet path: string[] = key.split('.');\n\t\t\tkey = path.shift();\n\n\t\t\tif (typeof this._cache[key] === 'undefined')\n\t\t\t\tthis._cache[key] = {};\n\n\t\t\tUtil.assignNestedValue(this._cache[key], path, value);\n\t\t}\n\t\telse this._cache[key] = value;\n\n\t\tawait this._provider.set(this._key, JSON.stringify(this._cache));\n\t}\n\n\t/**\n\t * Remove a value from storage for this instance\n\t * @param {string} key The key in storage to remove\n\t * @returns {Promise<void>}\n\t */\n\tpublic async remove(key: string): Promise<void>\n\t{\n\t\tif (typeof key === 'undefined') throw new TypeError('Key must be provided');\n\t\tif (typeof key !== 'string') throw new TypeError('Key must be a string');\n\n\t\tif (key.includes('.'))\n\t\t{\n\t\t\tlet path: string[] = key.split('.');\n\t\t\tkey = path.shift();\n\n\t\t\tif (typeof this._cache[key] !== 'undefined')\n\t\t\t\tUtil.removeNestedValue(this._cache[key], path);\n\t\t}\n\t\telse delete this._cache[key];\n\n\t\tawait this._provider.set(this._key, JSON.stringify(this._cache));\n\t}\n\n\t/**\n\t * Remove all key/value pairs from storage for this instance\n\t * @returns {Promise<void>}\n\t */\n\tpublic async clear(): Promise<void>\n\t{\n\t\tthis._cache = {};\n\t\tawait this._provider.set(this._key, JSON.stringify(this._cache));\n\t}\n}\n"],"sourceRoot":"../../src"}