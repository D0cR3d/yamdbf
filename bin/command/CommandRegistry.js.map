{"version":3,"sources":["command/CommandRegistry.ts"],"names":[],"mappings":";;;;;;;;AAEA,2CAAwC;AACxC,kDAAuD;AAEvD;;;;GAIG;AACH,qBAIC,SAAQ,uBAAgB;IAOxB,YAAmB,MAAS;QAE3B,KAAK,EAAE,CAAC;QACR,MAAM,CAAC,cAAc,CAAC,IAAI,EAAE,SAAS,EAAE,EAAE,KAAK,EAAE,MAAM,EAAE,CAAC,CAAC;QAE1D,IAAI,CAAC,SAAS,GAAG;YAChB,GAAG,EAAE,CAAC,IAAI,CAAC,GAAG,CAAK,OAAO,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,IAAI;SAC5C,CAAC;IACH,CAAC;IAED;;;;OAIG;IACH,IAAW,MAAM;QAEhB,MAAM,CAAC,KAAK,CAAC,IAAI,CAAC,IAAI,GAAG,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;IACpD,CAAC;IAED;;;;;;;;;;;OAWG;IACI,gBAAgB,CAAC,OAAqB;QAE5C,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,4BAA4B,OAAO,CAAC,IAAI,EAAE,CAAC,CAAC;QAC9D,IAAI,CAAC,iBAAiB,CAAK,OAAO,EAAE,IAAI,CAAC,CAAC;IAC3C,CAAC;IAED;;;;OAIG;IACI,OAAO,CAAC,KAAa;QAE3B,KAAK,GAAG,KAAK,CAAC,CAAC,CAAC,KAAK,CAAC,WAAW,EAAE,CAAC,CAAC,CAAC,KAAK,CAAC;QAC5C,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,WAAW,EAAE,KAAK,KAAK;eAChD,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,WAAW,EAAE,KAAK,KAAK,CAAC,CAAC,CAAC;IACvD,CAAC;IAED;;;;;;OAMG;IACI,iBAAiB,CAAC,OAAU,EAAE,WAAoB,KAAK;QAE7D,EAAE,CAAC,CAAC,IAAI,CAAC,GAAG,CAAK,OAAO,CAAC,IAAI,CAAC,CAAC,CAC/B,CAAC;YACA,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,GAAG,CAAK,OAAO,CAAC,IAAI,CAAC,CAAC,QAAQ,CAAC;gBACxC,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,wCAAwC,OAAO,CAAC,IAAI,EAAE,CAAC,CAAC;YAC3E,IAAI;gBACH,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,wCAAwC,OAAO,CAAC,IAAI,EAAE,CAAC,CAAC;YAE3E,IAAI,CAAC,MAAM,CAAK,OAAO,CAAC,IAAI,CAAC,CAAC;QAC/B,CAAC;QACD,IAAI,CAAC,GAAG,CAAK,OAAO,CAAC,IAAI,EAAE,OAAO,CAAC,CAAC;QACpC,OAAO,CAAC,SAAS,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;QAChC,EAAE,CAAC,CAAC,QAAQ,CAAC;YAAC,OAAO,CAAC,QAAQ,GAAG,IAAI,CAAC;IACvC,CAAC;IAED;;;OAGG;IACI,sBAAsB;QAE5B,GAAG,CAAC,CAAC,MAAM,OAAO,IAAI,IAAI,CAAC,MAAM,EAAE,CAAC;YACnC,GAAG,CAAC,CAAC,MAAM,KAAK,IAAI,OAAO,CAAC,OAAO,CAAC,CACpC,CAAC;gBACA,MAAM,SAAS,GAAM,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,KAAK,OAAO,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,OAAO,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC,CAAC;gBAC1F,MAAM,IAAI,GAAW,OAAO,CAAC,IAAI,CAAC;gBAElC,EAAE,CAAC,CAAC,CAAC,SAAS,CAAC;oBAAC,QAAQ,CAAC;gBACzB,EAAE,CAAC,CAAC,CAAC,OAAO,CAAC,QAAQ,CAAC;oBAAC,MAAM,IAAI,KAAK,CACrC,mCAAmC,IAAI,KAAK,SAAS,CAAC,IAAI,oBAAoB,KAAK,IAAI,CAAC,CAAC;gBAE1F,IAAI;oBAAC,MAAM,IAAI,KAAK,CACnB,qBACC,SAAS,CAAC,IAAI,iCAAiC,IAAI,qBAAqB,KAAK,IAAI,CAAC,CAAC;YACtF,CAAC;IACH,CAAC;IAED;;;OAGG;IACI,0BAA0B;QAEhC,MAAM,QAAQ,GAAa,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,OAAO,CAAC,KAAK,QAAQ,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;QACpF,GAAG,CAAC,CAAC,MAAM,IAAI,IAAI,QAAQ,CAAC,CAC5B,CAAC;YACA,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC;gBAAC,QAAQ,CAAC;YAEpB,MAAM,OAAO,GAAY,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;YAC5C,EAAE,CAAC,CAAC,OAAO,CAAC;gBACX,MAAM,IAAI,KAAK,CAAC,YAAY,OAAO,CAAC,IAAI,uCAAuC,IAAI,GAAG,CAAC,CAAC;QAC1F,CAAC;IACF,CAAC;IAED;;;;OAIG;IACI,KAAK,CAAC,aAAa;QAEzB,IAAI,OAAO,GAAY,IAAI,CAAC;QAC5B,GAAG,CAAC,CAAC,MAAM,OAAO,IAAI,IAAI,CAAC,MAAM,EAAE,CAAC,CACpC,CAAC;YACA,EAAE,CAAC,CAAC,OAAO,CAAC,YAAY,CAAC;gBAAC,QAAQ,CAAC;YACnC,IACA,CAAC;gBACA,MAAM,OAAO,CAAC,IAAI,EAAE,CAAC;gBACrB,OAAO,CAAC,YAAY,GAAG,IAAI,CAAC;YAC7B,CAAC;YACD,KAAK,CAAC,CAAC,GAAG,CAAC,CACX,CAAC;gBACA,OAAO,GAAG,KAAK,CAAC;gBAChB,IAAI,CAAC,OAAO,CAAC,KAAK,CACjB,YAAY,OAAO,CAAC,IAAI,wCAAwC,GAAG,CAAC,KAAK,EAAE,EAC3E,OAAO,CAAC,QAAQ,CAAC,CAAC,CAAC,uDAAuD,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC;YACrF,CAAC;QACF,CAAC;QACD,MAAM,CAAC,OAAO,CAAC;IAChB,CAAC;CACD;AA9IA;IADC,eAAM,CAAC,iBAAiB,CAAC;gDACO;AAPlC,0CAqJC","file":"CommandRegistry.js","sourcesContent":["import { Client } from '../client/Client';\r\nimport { Command } from './Command';\r\nimport { Collection } from 'discord.js';\r\nimport { Logger, logger } from '../util/logger/Logger';\r\n\r\n/**\r\n * @classdesc Stores loaded Commands in a Collection keyed by each Command's `name` property\r\n * @class CommandRegistry\r\n * @extends {external:Collection}\r\n */\r\nexport class CommandRegistry<\r\n\tT extends Client,\r\n\tK extends string = string,\r\n\tV extends Command<T> = Command<T>>\r\n\textends Collection<K, V>\r\n{\r\n\t@logger('CommandRegistry')\r\n\tprivate readonly _logger: Logger;\r\n\tprivate readonly _client: T;\r\n\tprivate readonly _reserved: ((() => string) | string)[];\r\n\r\n\tpublic constructor(client: T)\r\n\t{\r\n\t\tsuper();\r\n\t\tObject.defineProperty(this, '_client', { value: client });\r\n\r\n\t\tthis._reserved = [\r\n\t\t\t() => this.has(<K> 'limit') ? 'clear' : null\r\n\t\t];\r\n\t}\r\n\r\n\t/**\r\n\t * Contains all [Command groups]{@link Command#group}\r\n\t * @readonly\r\n\t * @type {string[]}\r\n\t */\r\n\tpublic get groups(): string[]\r\n\t{\r\n\t\treturn Array.from(new Set(this.map(c => c.group)));\r\n\t}\r\n\r\n\t/**\r\n\t * Register an external command and add it to the `<Client>.commands`\r\n\t * [collection]{@link external:Collection}, erroring on duplicate\r\n\t * aliases\r\n\t *\r\n\t * >**Note:** This is intended for Plugins to use to register external\r\n\t * commands with the Client instance. Under normal circumstances\r\n\t * commands should be added by placing them in the directory passed\r\n\t * to the `commandsDir` YAMDBF Client option\r\n\t * @param {Command} command The Command instance to be registered\r\n\t * @returns {void}\r\n\t */\r\n\tpublic registerExternal(command: Command<any>): void\r\n\t{\r\n\t\tthis._logger.info(`External command loaded: ${command.name}`);\r\n\t\tthis._registerInternal(<V> command, true);\r\n\t}\r\n\r\n\t/**\r\n\t * Resolve the given Command name or alias to a registered Command\r\n\t * @param {string} input Command name or alias\r\n\t * @returns Command\r\n\t */\r\n\tpublic resolve(input: string): V\r\n\t{\r\n\t\tinput = input ? input.toLowerCase() : input;\r\n\t\treturn this.find(c => c.name.toLowerCase() === input\r\n\t\t\t|| !!c.aliases.find(a => a.toLowerCase() === input));\r\n\t}\r\n\r\n\t/**\r\n\t * Complete registration of a command and add to the parent\r\n\t * collection, erroring on duplicate names and aliases.\r\n\t * This is an internal method and should not be used. Use\r\n\t * `registerExternal()` instead\r\n\t * @private\r\n\t */\r\n\tpublic _registerInternal(command: V, external: boolean = false): void\r\n\t{\r\n\t\tif (this.has(<K> command.name))\r\n\t\t{\r\n\t\t\tif (!this.get(<K> command.name).external)\r\n\t\t\t\tthis._logger.info(`Replacing previously loaded command: ${command.name}`);\r\n\t\t\telse\r\n\t\t\t\tthis._logger.info(`Replacing externally loaded command: ${command.name}`);\r\n\r\n\t\t\tthis.delete(<K> command.name);\r\n\t\t}\r\n\t\tthis.set(<K> command.name, command);\r\n\t\tcommand._register(this._client);\r\n\t\tif (external) command.external = true;\r\n\t}\r\n\r\n\t/**\r\n\t * Check for duplicate aliases. Used internally\r\n\t * @private\r\n\t */\r\n\tpublic _checkDuplicateAliases(): void\r\n\t{\r\n\t\tfor (const command of this.values())\r\n\t\t\tfor (const alias of command.aliases)\r\n\t\t\t{\r\n\t\t\t\tconst duplicate: V = this.filter(c => c !== command).find(c => c.aliases.includes(alias));\r\n\t\t\t\tconst name: string = command.name;\r\n\r\n\t\t\t\tif (!duplicate) continue;\r\n\t\t\t\tif (!command.external) throw new Error(\r\n\t\t\t\t\t`Commands may not share aliases: ${name}, ${duplicate.name} (shared alias: \"${alias}\")`);\r\n\r\n\t\t\t\telse throw new Error(\r\n\t\t\t\t\t`External command \"${\r\n\t\t\t\t\t\tduplicate.name}\" has conflicting alias with \"${name}\" (shared alias: \"${alias}\")`);\r\n\t\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Check for commands with reserved names. Used internally\r\n\t * @private\r\n\t */\r\n\tpublic _checkReservedCommandNames(): void\r\n\t{\r\n\t\tconst reserved: string[] = this._reserved.map(r => typeof r !== 'string' ? r() : r);\r\n\t\tfor (const name of reserved)\r\n\t\t{\r\n\t\t\tif (!name) continue;\r\n\r\n\t\t\tconst command: Command = this.resolve(name);\r\n\t\t\tif (command)\r\n\t\t\t\tthrow new Error(`Command '${command.name}' is using reserved name or alias: '${name}'`);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Run the `init()` method of all loaded commands.\r\n\t * This is an internal method and should not be used\r\n\t * @private\r\n\t */\r\n\tpublic async _initCommands(): Promise<boolean>\r\n\t{\r\n\t\tlet success: boolean = true;\r\n\t\tfor (const command of this.values())\r\n\t\t{\r\n\t\t\tif (command._initialized) continue;\r\n\t\t\ttry\r\n\t\t\t{\r\n\t\t\t\tawait command.init();\r\n\t\t\t\tcommand._initialized = true;\r\n\t\t\t}\r\n\t\t\tcatch (err)\r\n\t\t\t{\r\n\t\t\t\tsuccess = false;\r\n\t\t\t\tthis._logger.error(\r\n\t\t\t\t\t`Command \"${command.name}\" errored during initialization: \\n\\n${err.stack}`,\r\n\t\t\t\t\tcommand.external ? '\\n\\nPlease report this error to the command author.\\n' : '\\n');\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn success;\r\n\t}\r\n}\r\n"],"sourceRoot":"../../src"}