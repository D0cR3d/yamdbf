{"version":3,"sources":["command/base/Reload.ts"],"names":[],"mappings":";;;;;;;;AAEA,gEAAkE;AAElE,wCAAqC;AACrC,4DAAmD;AACnD,0CAAuC;AACvC,qDAA0D;AAC1D,MAAM,EAAE,GAAG,EAAE,GAAG,WAAI,CAAC;AAErB,eAAqB,SAAQ,iBAAO;IAKnC;QAEC,KAAK,CAAC;YACL,IAAI,EAAE,QAAQ;YACd,IAAI,EAAE,4BAA4B;YAClC,KAAK,EAAE,gBAAgB;YACvB,SAAS,EAAE,IAAI;SACf,CAAC,CAAC;IACJ,CAAC;IAGM,MAAM,CAAC,OAAgB,EAAE,CAAC,GAAG,CAAmB;QAEtD,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,6BAA6B,IAAI,CAAC,MAAM,CAAC,WAAW,EAAE,CAAC,CAAC;QAEzE,MAAM,KAAK,GAAW,GAAG,EAAE,CAAC;QAE5B,MAAM,QAAQ,GAAa,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,QAAQ,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC;QACzF,MAAM,QAAQ,GAAW,IAAI,CAAC,MAAM,CAAC,qBAAqB,EAAE,CAAC;QAE7D,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,sCAAsC,CAAC,CAAC;QACzD,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,aAAa,EAAE,CAAC;QAErC,MAAM,SAAS,GACd,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,CAAC,QAAQ,CAAC,QAAQ,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC;QAE7D,0CAA0C;QAC1C,GAAG,CAAC,CAAC,MAAM,OAAO,IAAI,SAAS,CAAC,MAAM,EAAE,CAAC;YAAC,OAAO,CAAC,OAAO,EAAE,CAAC;QAE5D,MAAM,GAAG,GAAW,GAAG,EAAE,CAAC;QAC1B,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,OAAO,EAAE,GAAG,CAAC,yBAAC,CAAC,kBAAkB,EACpD,EAAE,MAAM,EAAE,QAAQ,CAAC,QAAQ,EAAE,EAAE,IAAI,EAAE,CAAC,GAAG,GAAG,KAAK,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;IACpE,CAAC;CACD;AAnCA;IADC,eAAM,CAAC,gBAAgB,CAAC;0CACQ;AAajC;IADC,+BAAW;uCAsBX;AArCF,4BAsCC","file":"Reload.js","sourcesContent":["import { Collection } from 'discord.js';\nimport { ResourceLoader } from '../../types/ResourceLoader';\nimport { BaseStrings as s } from '../../localization/BaseStrings';\nimport { Message } from '../../types/Message';\nimport { Command } from '../Command';\nimport { localizable } from '../CommandDecorators';\nimport { Util } from '../../util/Util';\nimport { Logger, logger } from '../../util/logger/Logger';\nconst { now } = Util;\n\nexport default class extends Command\n{\n\t@logger('Command:reload')\n\tprivate readonly _logger: Logger;\n\n\tpublic constructor()\n\t{\n\t\tsuper({\n\t\t\tname: 'reload',\n\t\t\tdesc: 'Reload all custom commands',\n\t\t\tusage: '<prefix>reload',\n\t\t\townerOnly: true\n\t\t});\n\t}\n\n\t@localizable\n\tpublic action(message: Message, [res]: [ResourceLoader]): Promise<Message | Message[]>\n\t{\n\t\tthis._logger.log(`Reloading commands from: $${this.client.commandsDir}`);\n\n\t\tconst start: number = now();\n\n\t\tconst disabled: string[] = this.client.commands.filter(c => c.disabled).map(c => c.name);\n\t\tconst reloaded: number = this.client._reloadCustomCommands();\n\n\t\tthis._logger.log(`Re-initializing reloaded commands...`);\n\t\tthis.client.commands._initCommands();\n\n\t\tconst toDisable: Collection<string, Command> =\n\t\t\tthis.client.commands.filter(c => disabled.includes(c.name));\n\n\t\t// Re-disable previously disabled commands\n\t\tfor (const command of toDisable.values()) command.disable();\n\n\t\tconst end: number = now();\n\t\treturn this.respond(message, res(s.CMD_RELOAD_SUCCESS,\n\t\t\t{ number: reloaded.toString(), time: (end - start).toFixed(3) }));\n\t}\n}\n"],"sourceRoot":"../../../src"}