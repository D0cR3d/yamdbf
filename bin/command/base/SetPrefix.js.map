{"version":3,"sources":["command/base/SetPrefix.ts"],"names":[],"mappings":";;;;;;;;AACA,gEAAkE;AAElE,wCAAqC;AACrC,4DAAmD;AAEnD,eAAqB,SAAQ,iBAAO;IAEnC;QAEC,KAAK,CAAC;YACL,IAAI,EAAE,WAAW;YACjB,IAAI,EAAE,6BAA6B;YACnC,OAAO,EAAE,CAAC,QAAQ,CAAC;YACnB,KAAK,EAAE,4BAA4B;YACnC,IAAI,EAAE,2KAA2K;YACjL,iBAAiB,EAAE,CAAC,eAAe,CAAC;SACpC,CAAC,CAAC;IACJ,CAAC;IAGM,KAAK,CAAC,MAAM,CAAC,OAAgB,EAAE,CAAC,GAAG,EAAE,MAAM,CAA2B;QAE5E,EAAE,CAAC,CAAC,CAAC,MAAM,CAAC;YACX,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,OAAO,EAAE,GAAG,CAAC,yBAAC,CAAC,kBAAkB,EACpD,EAAE,MAAM,EAAE,MAAM,IAAI,CAAC,MAAM,CAAC,SAAS,CAAC,OAAO,CAAC,KAAK,CAAC,EAAE,CAAC,CAAC,CAAC;QAE3D,EAAE,CAAC,CAAC,MAAM,CAAC,MAAM,GAAG,EAAE,CAAC;YACtB,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,OAAO,EAAE,GAAG,CAAC,yBAAC,CAAC,yBAAyB,CAAC,CAAC,CAAC;QAEhE,EAAE,CAAC,CAAC,OAAO,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;YACxB,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,OAAO,EAAE,GAAG,CAAC,yBAAC,CAAC,4BAA4B,CAAC,CAAC,CAAC;QAEnE,EAAE,CAAC,CAAC,MAAM,KAAK,OAAO,CAAC;YAAC,MAAM,GAAG,EAAE,CAAC;QAEpC,EAAE,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC;YACvB,GAAG,CAAC,CAAC,MAAM,KAAK,IAAI,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,MAAM,EAAE,CAAC;gBACvD,MAAM,KAAK,CAAC,QAAQ,CAAC,GAAG,CAAC,QAAQ,EAAE,MAAM,CAAC,CAAC;QAC7C,IAAI;YAAC,MAAM,OAAO,CAAC,KAAK,CAAC,OAAO,CAAC,QAAQ,CAAC,GAAG,CAAC,QAAQ,EAAE,MAAM,CAAC,CAAC;QAEhE,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,OAAO,EAAE,GAAG,CAAC,yBAAC,CAAC,kBAAkB,EAAE,EAAE,MAAM,EAAE,CAAC,CAAC,CAAC;IACrE,CAAC;CACD;AArBA;IADC,+BAAW;uCAqBX;AAnCF,4BAoCC","file":"SetPrefix.js","sourcesContent":["import { ResourceLoader } from '../../types/ResourceLoader';\nimport { BaseStrings as s } from '../../localization/BaseStrings';\nimport { Message } from '../../types/Message';\nimport { Command } from '../Command';\nimport { localizable } from '../CommandDecorators';\n\nexport default class extends Command\n{\n\tpublic constructor()\n\t{\n\t\tsuper({\n\t\t\tname: 'setprefix',\n\t\t\tdesc: 'Set or check command prefix',\n\t\t\taliases: ['prefix'],\n\t\t\tusage: '<prefix>setprefix [prefix]',\n\t\t\tinfo: 'Prefixes may be 1-10 characters in length and may not include backslashes or backticks. Use \"clear\" to clear the prefix and allow commands to be called without a prefix.',\n\t\t\tcallerPermissions: ['ADMINISTRATOR']\n\t\t});\n\t}\n\n\t@localizable\n\tpublic async action(message: Message, [res, prefix]: [ResourceLoader, string]): Promise<any>\n\t{\n\t\tif (!prefix)\n\t\t\treturn this.respond(message, res(s.CMD_PREFIX_CURRENT,\n\t\t\t\t{ prefix: await this.client.getPrefix(message.guild) }));\n\n\t\tif (prefix.length > 10)\n\t\t\treturn this.respond(message, res(s.CMD_PREFIX_ERR_CHAR_LIMIT));\n\n\t\tif (/[\\\\`]/.test(prefix))\n\t\t\treturn this.respond(message, res(s.CMD_PREFIX_ERR_INVALID_CHARS));\n\n\t\tif (prefix === 'clear') prefix = '';\n\n\t\tif (this.client.selfbot)\n\t\t\tfor (const guild of this.client.storage.guilds.values())\n\t\t\t\tawait guild.settings.set('prefix', prefix);\n\t\telse await message.guild.storage.settings.set('prefix', prefix);\n\n\t\treturn this.respond(message, res(s.CMD_PREFIX_SUCCESS, { prefix }));\n\t}\n}\n"],"sourceRoot":"../../../src"}