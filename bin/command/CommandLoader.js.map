{"version":3,"sources":["command/CommandLoader.ts"],"names":[],"mappings":";;;;;;;;AAAA,6BAA6B;AAC7B,6BAA6B;AAE7B,kDAAuD;AAKvD;;;GAGG;AACH;IAOC,YAAmB,MAAc;QAEhC,IAAI,CAAC,OAAO,GAAG,MAAM,CAAC;QACtB,IAAI,CAAC,SAAS,GAAG,MAAM,CAAC,QAAQ,CAAC;IAClC,CAAC;IAED;;;;;OAKG;IACI,gBAAgB,CAAC,GAAW,EAAE,OAAgB,KAAK;QAEzD,GAAG,GAAG,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC;QACxB,MAAM,YAAY,GAAa,IAAI,CAAC,IAAI,CAAC,GAAG,GAAG,UAAU,CAAC,CAAC;QAE3D,MAAM,cAAc,GAAc,EAAE,CAAC;QACrC,IAAI,CAAC,OAAO,CAAC,KAAK,CAAC,wBAAwB,GAAG,EAAE,CAAC,CAAC;QAElD,GAAG,CAAC,CAAC,MAAM,IAAI,IAAI,YAAY,CAAC,CAChC,CAAC;YACA,OAAO,OAAO,CAAC,KAAK,CAAC,OAAO,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC;YAC5C,MAAM,UAAU,GAAQ,OAAO,CAAC,IAAI,CAAC,CAAC;YACtC,MAAM,YAAY,GAAmB,IAAI,CAAC,iBAAiB,CAAC,UAAU,CAAC,CAAC;YACxE,EAAE,CAAC,CAAC,CAAC,YAAY,CAAC,CAClB,CAAC;gBACA,IAAI,CAAC,OAAO,CAAC,KAAK,CAAC,yCAAyC,IAAI,EAAE,CAAC,CAAC;gBACpE,QAAQ,CAAC;YACV,CAAC;YAED,MAAM,eAAe,GAAY,IAAI,YAAY,EAAE,CAAC;YAEpD,EAAE,CAAC,CAAC,IAAI,IAAI,IAAI,CAAC,OAAO,CAAC,WAAW;iBAClC,QAAQ,CAAmB,eAAe,CAAC,IAAI,CAAC,CAAC;gBAClD,QAAQ,CAAC;YAEV,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,mBAAmB,eAAe,CAAC,IAAI,EAAE,CAAC,CAAC;YAC7D,eAAe,CAAC,SAAS,GAAG,IAAI,CAAC;YACjC,cAAc,CAAC,IAAI,CAAC,eAAe,CAAC,CAAC;QACtC,CAAC;QAED,GAAG,CAAC,CAAC,MAAM,OAAO,IAAI,cAAc,CAAC;YACpC,IAAI,CAAC,SAAS,CAAC,iBAAiB,CAAC,OAAO,CAAC,CAAC;QAE3C,MAAM,CAAC,cAAc,CAAC,MAAM,CAAC;IAC9B,CAAC;IAED;;;OAGG;IACK,iBAAiB,CAAC,GAAQ;QAEjC,IAAI,UAA0B,CAAC;QAC/B,MAAM,IAAI,GAAa,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;QACxC,EAAE,CAAC,CAAC,MAAM,CAAC,cAAc,CAAC,GAAG,CAAC,CAAC,IAAI,KAAK,SAAS,CAAC;YACjD,UAAU,GAAG,GAAG,CAAC;QAElB,IAAI,CAAC,EAAE,CAAC,CAAC,IAAI,CAAC,MAAM,GAAG,CAAC,CAAC;YACxB,GAAG,CAAC,CAAC,MAAM,GAAG,IAAI,IAAI,CAAC,CACvB,CAAC;gBACA,UAAU,GAAG,IAAI,CAAC,iBAAiB,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC;gBAC9C,EAAE,CAAC,CAAC,CAAC,UAAU,CAAC;oBAAC,QAAQ,CAAC;gBAC1B,EAAE,CAAC,CAAC,MAAM,CAAC,cAAc,CAAC,UAAU,CAAC,CAAC,IAAI,KAAK,SAAS,CAAC;oBAAC,KAAK,CAAC;YACjE,CAAC;QAEF,MAAM,CAAC,UAAU,CAAC;IACnB,CAAC;CACD;AAzEA;IADC,eAAM,CAAC,eAAe,CAAC;8CACS;AAHlC,sCA4EC","file":"CommandLoader.js","sourcesContent":["import * as glob from 'glob';\r\nimport * as path from 'path';\r\nimport { Client } from '../client/Client';\r\nimport { Logger, logger } from '../util/logger/Logger';\r\nimport { CommandRegistry } from './CommandRegistry';\r\nimport { Command } from './Command';\r\nimport { BaseCommandName } from '../types/BaseCommandName';\r\n\r\n/**\r\n * Handles loading all commands from the given Client's commandsDir\r\n * @private\r\n */\r\nexport class CommandLoader\r\n{\r\n\t@logger('CommandLoader')\r\n\tprivate readonly _logger: Logger;\r\n\tprivate readonly _client: Client;\r\n\tprivate readonly _commands: CommandRegistry<any>;\r\n\r\n\tpublic constructor(client: Client)\r\n\t{\r\n\t\tthis._client = client;\r\n\t\tthis._commands = client.commands;\r\n\t}\r\n\r\n\t/**\r\n\t * Load commands from the given directory\r\n\t * @param {string} dir Directory to load from\r\n\t * @param {boolean} [base=false] Whether or not the commands being loaded are base commands\r\n\t * @returns {number} The number of Commands loaded from the directory\r\n\t */\r\n\tpublic loadCommandsFrom(dir: string, base: boolean = false): number\r\n\t{\r\n\t\tdir = path.resolve(dir);\r\n\t\tconst commandFiles: string[] = glob.sync(`${dir}/**/*.js`);\r\n\r\n\t\tconst loadedCommands: Command[] = [];\r\n\t\tthis._logger.debug(`Loading commands in: ${dir}`);\r\n\r\n\t\tfor (const file of commandFiles)\r\n\t\t{\r\n\t\t\tdelete require.cache[require.resolve(file)];\r\n\t\t\tconst loadedFile: any = require(file);\r\n\t\t\tconst commandClass: typeof Command = this._findCommandClass(loadedFile);\r\n\t\t\tif (!commandClass)\r\n\t\t\t{\r\n\t\t\t\tthis._logger.debug(`Failed to find Command class in file: ${file}`);\r\n\t\t\t\tcontinue;\r\n\t\t\t}\r\n\r\n\t\t\tconst commandInstance: Command = new commandClass();\r\n\r\n\t\t\tif (base && this._client.disableBase\r\n\t\t\t\t.includes(<BaseCommandName> commandInstance.name))\r\n\t\t\t\tcontinue;\r\n\r\n\t\t\tthis._logger.info(`Loaded command: ${commandInstance.name}`);\r\n\t\t\tcommandInstance._classloc = file;\r\n\t\t\tloadedCommands.push(commandInstance);\r\n\t\t}\r\n\r\n\t\tfor (const command of loadedCommands)\r\n\t\t\tthis._commands._registerInternal(command);\r\n\r\n\t\treturn loadedCommands.length;\r\n\t}\r\n\r\n\t/**\r\n\t * Recursively search for a Command class within the given object\r\n\t * @private\r\n\t */\r\n\tprivate _findCommandClass(obj: any): typeof Command\r\n\t{\r\n\t\tlet foundClass: typeof Command;\r\n\t\tconst keys: string[] = Object.keys(obj);\r\n\t\tif (Object.getPrototypeOf(obj).name === 'Command')\r\n\t\t\tfoundClass = obj;\r\n\r\n\t\telse if (keys.length > 0)\r\n\t\t\tfor (const key of keys)\r\n\t\t\t{\r\n\t\t\t\tfoundClass = this._findCommandClass(obj[key]);\r\n\t\t\t\tif (!foundClass) continue;\r\n\t\t\t\tif (Object.getPrototypeOf(foundClass).name === 'Command') break;\r\n\t\t\t}\r\n\r\n\t\treturn foundClass;\r\n\t}\r\n}\r\n"],"sourceRoot":"../../src"}