{"version":3,"sources":["command/resolvers/base/ChannelResolver.ts"],"names":[],"mappings":"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","file":"ChannelResolver.js","sourcesContent":["import { Resolver } from '../Resolver';\nimport { Client } from '../../../client/Client';\nimport { Command } from '../../Command';\nimport { Message } from '../../../types/Message';\nimport { Lang } from '../../../localization/Lang';\nimport { ResourceLoader } from '../../../types/ResourceLoader';\nimport { BaseStrings as s } from '../../../localization/BaseStrings';\nimport { TextChannel, Collection } from 'discord.js';\nimport { Util } from '../../../util/Util';\n\nexport class ChannelResolver extends Resolver\n{\n\tpublic constructor(client: Client)\n\t{\n\t\tsuper(client, 'Channel', 'TextChannel');\n\t}\n\n\tpublic async validate(value: any): Promise<boolean>\n\t{\n\t\treturn value instanceof TextChannel;\n\t}\n\n\tpublic async resolve(message: Message, command: Command, name: string, value: string): Promise<TextChannel>\n\t{\n\t\tconst dm: boolean = message.channel.type !== 'text';\n\t\tconst lang: string = dm\n\t\t\t? this.client.defaultLang\n\t\t\t: await message.guild.storage.settings.get('lang')\n\t\t\t\t|| this.client.defaultLang;\n\n\t\tconst res: ResourceLoader = Lang.createResourceLoader(lang);\n\t\tconst prefix: string = !dm ? await message.guild.storage.settings.get('prefix') : '';\n\t\tconst usage: string = Lang.getCommandInfo(command, lang).usage.replace(/<prefix>/g, prefix);\n\n\t\tconst channelRegex: RegExp = /^(?:<#)?(\\d+)>?$/;\n\n\t\tlet channel: TextChannel;\n\t\tif (channelRegex.test(value))\n\t\t{\n\t\t\tconst id: string = value.match(channelRegex)[1];\n\t\t\tchannel = <TextChannel> message.guild.channels.get(id);\n\t\t\tif (!channel) throw new Error(\n\t\t\t\tres(s.RESOLVE_ERR_RESOLVE_TYPE_ID, { name, arg: value, usage, type: 'Channel' }));\n\t\t}\n\t\telse\n\t\t{\n\t\t\tconst normalized: string = Util.normalize(value);\n\t\t\tconst channels: Collection<string, TextChannel> =\n\t\t\t\t(<Collection<string, TextChannel>> message.guild.channels)\n\t\t\t\t\t.filter(a => a.type === 'text')\n\t\t\t\t\t.filter(a => Util.normalize(a.name).includes(normalized));\n\n\t\t\tif (channels.size > 1) throw String(\n\t\t\t\tres(s.RESOLVE_ERR_MULTIPLE_CHANNEL_RESULTS,\n\t\t\t\t\t{ name, usage, channels: channels.map(c => `\\`#${c.name}\\``).join(', ') }));\n\n\t\t\tchannel = channels.first();\n\t\t\tif (!channel) throw new Error(\n\t\t\t\tres(s.RESOLVE_ERR_RESOLVE_TYPE_TEXT, { name, arg: value, usage, type: 'Channel' }));\n\t\t}\n\n\t\treturn channel;\n\t}\n}\n"],"sourceRoot":"../../../../src"}