{"version":3,"sources":["command/resolvers/base/StringResolver.ts"],"names":[],"mappings":";;AAAA,0CAAuC;AAKvC,oBAA4B,SAAQ,mBAAQ;IAE3C,YAAmB,MAAc;QAEhC,KAAK,CAAC,MAAM,EAAE,QAAQ,EAAE,QAAQ,CAAC,CAAC;IACnC,CAAC;IAEM,KAAK,CAAC,QAAQ,CAAC,KAAU;QAE/B,MAAM,CAAC,OAAO,KAAK,KAAK,QAAQ,CAAC;IAClC,CAAC;IAEM,KAAK,CAAC,OAAO,CAAC,OAAgB,EAAE,OAAgB,EAAE,IAAY,EAAE,KAAwB;QAE9F,MAAM,CAAC,KAAK,YAAY,KAAK,CAAC,CAAC,CAAC,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,QAAQ,EAAE,CAAC;IACrE,CAAC;CACD;AAhBD,wCAgBC","file":"StringResolver.js","sourcesContent":["import { Resolver } from '../Resolver';\nimport { Client } from '../../../client/Client';\nimport { Command } from '../../Command';\nimport { Message } from '../../../types/Message';\n\nexport class StringResolver extends Resolver\n{\n\tpublic constructor(client: Client)\n\t{\n\t\tsuper(client, 'String', 'string');\n\t}\n\n\tpublic async validate(value: any): Promise<boolean>\n\t{\n\t\treturn typeof value === 'string';\n\t}\n\n\tpublic async resolve(message: Message, command: Command, name: string, value: string | string[]): Promise<string>\n\t{\n\t\treturn value instanceof Array ? value.join('\\n') : value.toString();\n\t}\n}\n"],"sourceRoot":"../../../../src"}