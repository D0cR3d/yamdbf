{"version":3,"sources":["command/resolvers/base/NumberResolver.ts"],"names":[],"mappings":";;AAAA,0CAAuC;AAIvC,qDAAkD;AAElD,mEAAqE;AAErE,oBAA4B,SAAQ,mBAAQ;IAE3C,YAAmB,MAAc;QAEhC,KAAK,CAAC,MAAM,EAAE,QAAQ,EAAE,QAAQ,CAAC,CAAC;IACnC,CAAC;IAEM,KAAK,CAAC,QAAQ,CAAC,KAAU;QAE/B,MAAM,CAAC,OAAO,KAAK,KAAK,QAAQ,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,IAAI,QAAQ,CAAC,KAAK,CAAC,CAAC;IACtE,CAAC;IAEM,KAAK,CAAC,OAAO,CAAC,OAAgB,EAAE,OAAgB,EAAE,IAAY,EAAE,KAAa;QAEnF,MAAM,EAAE,GAAY,OAAO,CAAC,OAAO,CAAC,IAAI,KAAK,MAAM,CAAC;QACpD,MAAM,IAAI,GAAW,EAAE;YACtB,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,WAAW;YACzB,CAAC,CAAC,MAAM,OAAO,CAAC,KAAK,CAAC,OAAO,CAAC,QAAQ,CAAC,GAAG,CAAC,MAAM,CAAC;mBAC9C,IAAI,CAAC,MAAM,CAAC,WAAW,CAAC;QAE7B,MAAM,GAAG,GAAmB,WAAI,CAAC,oBAAoB,CAAC,IAAI,CAAC,CAAC;QAC5D,MAAM,MAAM,GAAW,CAAC,EAAE,CAAC,CAAC,CAAC,MAAM,OAAO,CAAC,KAAK,CAAC,OAAO,CAAC,QAAQ,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC;QACrF,MAAM,KAAK,GAAW,WAAI,CAAC,cAAc,CAAC,OAAO,EAAE,IAAI,CAAC,CAAC,KAAK,CAAC,OAAO,CAAC,WAAW,EAAE,MAAM,CAAC,CAAC;QAE5F,MAAM,MAAM,GAAW,UAAU,CAAC,KAAK,CAAC,CAAC;QACzC,EAAE,CAAC,CAAC,CAAC,CAAC,MAAM,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC,CAAC;YAClC,MAAM,IAAI,KAAK,CAAC,GAAG,CAAC,yBAAC,CAAC,0BAA0B,EAAE,EAAE,IAAI,EAAE,GAAG,EAAE,KAAK,EAAE,KAAK,EAAE,CAAC,CAAC,CAAC;QAEjF,MAAM,CAAC,MAAM,CAAC;IACf,CAAC;CACD;AA9BD,wCA8BC","file":"NumberResolver.js","sourcesContent":["import { Resolver } from '../Resolver';\nimport { Client } from '../../../client/Client';\nimport { Command } from '../../Command';\nimport { Message } from '../../../types/Message';\nimport { Lang } from '../../../localization/Lang';\nimport { ResourceLoader } from '../../../types/ResourceLoader';\nimport { BaseStrings as s } from '../../../localization/BaseStrings';\n\nexport class NumberResolver extends Resolver\n{\n\tpublic constructor(client: Client)\n\t{\n\t\tsuper(client, 'Number', 'number');\n\t}\n\n\tpublic async validate(value: any): Promise<boolean>\n\t{\n\t\treturn typeof value === 'number' && !isNaN(value) && isFinite(value);\n\t}\n\n\tpublic async resolve(message: Message, command: Command, name: string, value: string): Promise<number>\n\t{\n\t\tconst dm: boolean = message.channel.type !== 'text';\n\t\tconst lang: string = dm\n\t\t\t? this.client.defaultLang\n\t\t\t: await message.guild.storage.settings.get('lang')\n\t\t\t\t|| this.client.defaultLang;\n\n\t\tconst res: ResourceLoader = Lang.createResourceLoader(lang);\n\t\tconst prefix: string = !dm ? await message.guild.storage.settings.get('prefix') : '';\n\t\tconst usage: string = Lang.getCommandInfo(command, lang).usage.replace(/<prefix>/g, prefix);\n\n\t\tconst result: number = parseFloat(value);\n\t\tif (!(await this.validate(result)))\n\t\t\tthrow new Error(res(s.RESOLVE_ERR_RESOLVE_NUMBER, { name, arg: value, usage }));\n\n\t\treturn result;\n\t}\n}\n"],"sourceRoot":"../../../../src"}