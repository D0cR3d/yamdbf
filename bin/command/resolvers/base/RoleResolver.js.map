{"version":3,"sources":["command/resolvers/base/RoleResolver.ts"],"names":[],"mappings":"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","file":"RoleResolver.js","sourcesContent":["import { Resolver } from '../Resolver';\r\nimport { Client } from '../../../client/Client';\r\nimport { Command } from '../../Command';\r\nimport { Message } from '../../../types/Message';\r\nimport { Lang } from '../../../localization/Lang';\r\nimport { ResourceLoader } from '../../../types/ResourceLoader';\r\nimport { BaseStrings as s } from '../../../localization/BaseStrings';\r\nimport { Role, Collection } from 'discord.js';\r\nimport { Util } from '../../../util/Util';\r\n\r\nexport class RoleResolver extends Resolver\r\n{\r\n\tpublic constructor(client: Client)\r\n\t{\r\n\t\tsuper(client, 'Role');\r\n\t}\r\n\r\n\tpublic async validate(value: any): Promise<boolean>\r\n\t{\r\n\t\treturn value instanceof Role;\r\n\t}\r\n\r\n\tpublic async resolve(message: Message, command: Command, name: string, value: string): Promise<Role>\r\n\t{\r\n\t\tconst dm: boolean = message.channel.type !== 'text';\r\n\t\tconst lang: string = dm\r\n\t\t\t? this.client.defaultLang\r\n\t\t\t: await message.guild.storage.settings.get('lang')\r\n\t\t\t\t|| this.client.defaultLang;\r\n\r\n\t\tconst res: ResourceLoader = Lang.createResourceLoader(lang);\r\n\t\tconst prefix: string = !dm ? await message.guild.storage.settings.get('prefix') : '';\r\n\t\tconst usage: string = Lang.getCommandInfo(command, lang).usage.replace(/<prefix>/g, prefix);\r\n\r\n\t\tconst roleRegex: RegExp = /^(?:<@&)?(\\d+)>?$/;\r\n\r\n\t\tlet role: Role;\r\n\t\tif (roleRegex.test(value))\r\n\t\t{\r\n\t\t\tconst id: string = value.match(roleRegex)[1];\r\n\t\t\trole = message.guild.roles.get(id);\r\n\t\t\tif (!role) throw new Error(\r\n\t\t\t\tres(s.RESOLVE_ERR_RESOLVE_TYPE_ID, { name, arg: value, usage, type: 'Role' }));\r\n\t\t}\r\n\t\telse\r\n\t\t{\r\n\t\t\tconst normalized: string = Util.normalize(value);\r\n\t\t\tlet roles: Collection<string, Role> = message.guild.roles.filter(a =>\r\n\t\t\t\tUtil.normalize(a.name).includes(normalized));\r\n\r\n\t\t\tif (roles.size > 1) throw String(\r\n\t\t\t\tres(s.RESOLVE_ERR_MULTIPLE_ROLE_RESULTS,\r\n\t\t\t\t\t{ name, usage, roles: roles.map(r => `\\`${r.name}\\``).join(', ') }));\r\n\r\n\t\t\trole = roles.first();\r\n\t\t\tif (!role) throw new Error(\r\n\t\t\t\tres(s.RESOLVE_ERR_RESOLVE_TYPE_TEXT, { name, arg: value, usage, type: 'Role' }));\r\n\t\t}\r\n\r\n\t\treturn role;\r\n\t}\r\n}\r\n"],"sourceRoot":"../../../../src"}