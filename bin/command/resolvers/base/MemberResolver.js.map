{"version":3,"sources":["command/resolvers/base/MemberResolver.ts"],"names":[],"mappings":"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","file":"MemberResolver.js","sourcesContent":["import { Resolver } from '../Resolver';\nimport { Client } from '../../../client/Client';\nimport { Command } from '../../Command';\nimport { Message } from '../../../types/Message';\nimport { Lang } from '../../../localization/Lang';\nimport { ResourceLoader } from '../../../types/ResourceLoader';\nimport { BaseStrings as s } from '../../../localization/BaseStrings';\nimport { GuildMember, Collection } from 'discord.js';\n\nexport class MemberResolver extends Resolver\n{\n\tpublic constructor(client: Client)\n\t{\n\t\tsuper(client, 'Member', 'GuildMember');\n\t}\n\n\tpublic async validate(value: any): Promise<boolean>\n\t{\n\t\treturn value instanceof GuildMember;\n\t}\n\n\tpublic async resolve(message: Message, command: Command, name: string, value: string): Promise<GuildMember>\n\t{\n\t\tconst dm: boolean = message.channel.type !== 'text';\n\t\tconst lang: string = dm\n\t\t\t? this.client.defaultLang\n\t\t\t: await message.guild.storage.settings.get('lang')\n\t\t\t\t|| this.client.defaultLang;\n\n\t\tconst res: ResourceLoader = Lang.createResourceLoader(lang);\n\t\tconst prefix: string = !dm ? await message.guild.storage.settings.get('prefix') : '';\n\t\tconst usage: string = Lang.getCommandInfo(command, lang).usage.replace(/<prefix>/g, prefix);\n\n\t\tconst idRegex: RegExp = /^(?:<@!?)?(\\d+)>?$/;\n\t\tconst normalizeUser: (text: string) => string =\n\t\t\ttext => text.toLowerCase().replace(/[^a-z0-9#]+/g, '');\n\n\t\tlet member: GuildMember;\n\t\tif (idRegex.test(value))\n\t\t{\n\t\t\ttry { member = await message.guild.fetchMember(value.match(idRegex)[1]); }\n\t\t\tcatch {}\n\t\t\tif (!member) throw new Error(\n\t\t\t\tres(s.RESOLVE_ERR_RESOLVE_TYPE_ID, { name, arg: value, usage, type: 'Member' }));\n\t\t}\n\t\telse\n\t\t{\n\t\t\tconst normalized: string = normalizeUser(value);\n\t\t\tlet members: Collection<string, GuildMember> = message.guild.members.filter(a =>\n\t\t\t\tnormalizeUser(a.displayName).includes(normalized)\n\t\t\t\t\t|| normalizeUser(a.user.username).includes(normalized)\n\t\t\t\t\t|| normalizeUser(a.user.tag).includes(normalized));\n\n\t\t\tif (members.size > 1)\n\t\t\t\tthrow String(res(s.RESOLVE_ERR_MULTIPLE_USER_RESULTS,\n\t\t\t\t\t{ name, usage, users: members.map(m => `\\`${m.user.tag}\\``).join(', ') }));\n\n\t\t\tmember = members.first();\n\t\t\tif (!member) throw new Error(\n\t\t\t\tres(s.RESOLVE_ERR_RESOLVE_TYPE_TEXT, { name, arg: value, usage, type: 'Member' }));\n\t\t}\n\n\t\treturn member;\n\t}\n}\n"],"sourceRoot":"../../../../src"}