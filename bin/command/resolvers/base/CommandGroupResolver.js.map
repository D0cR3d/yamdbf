{"version":3,"sources":["command/resolvers/base/CommandGroupResolver.ts"],"names":[],"mappings":";;AAAA,0CAAuC;AAIvC,qDAAkD;AAElD,mEAAqE;AACrE,6CAA0C;AAE1C,0BAAkC,SAAQ,mBAAQ;IAEjD,YAAmB,MAAc;QAEhC,KAAK,CAAC,MAAM,EAAE,cAAc,CAAC,CAAC;IAC/B,CAAC;IAEM,KAAK,CAAC,QAAQ,CAAC,KAAU;QAE/B,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,MAAM,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC;IACpD,CAAC;IAEM,KAAK,CAAC,OAAO,CAAC,OAAgB,EAAE,OAAgB,EAAE,IAAY,EAAE,KAAa;QAEnF,MAAM,EAAE,GAAY,OAAO,CAAC,OAAO,CAAC,IAAI,KAAK,MAAM,CAAC;QACpD,MAAM,IAAI,GAAW,EAAE;YACtB,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,WAAW;YACzB,CAAC,CAAC,MAAM,OAAO,CAAC,KAAK,CAAC,OAAO,CAAC,QAAQ,CAAC,GAAG,CAAC,MAAM,CAAC;mBAC9C,IAAI,CAAC,MAAM,CAAC,WAAW,CAAC;QAE7B,MAAM,GAAG,GAAmB,WAAI,CAAC,oBAAoB,CAAC,IAAI,CAAC,CAAC;QAC5D,MAAM,MAAM,GAAW,CAAC,EAAE,CAAC,CAAC,CAAC,MAAM,OAAO,CAAC,KAAK,CAAC,OAAO,CAAC,QAAQ,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC;QACrF,MAAM,KAAK,GAAW,WAAI,CAAC,cAAc,CAAC,OAAO,EAAE,IAAI,CAAC,CAAC,KAAK,CAAC,OAAO,CAAC,WAAW,EAAE,MAAM,CAAC,CAAC;QAE5F,MAAM,MAAM,GAAW,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,MAAM;aAChD,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,WAAI,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,QAAQ,CAAC,WAAI,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;QAE/D,EAAE,CAAC,CAAC,CAAC,MAAM,CAAC;YACX,MAAM,IAAI,KAAK,CAAC,GAAG,CAAC,yBAAC,CAAC,6BAA6B,EAAE,EAAE,IAAI,EAAE,GAAG,EAAE,KAAK,EAAE,KAAK,EAAE,IAAI,EAAE,cAAc,EAAE,CAAC,CAAC,CAAC;QAE1G,MAAM,CAAC,MAAM,CAAC;IACf,CAAC;CACD;AAhCD,oDAgCC","file":"CommandGroupResolver.js","sourcesContent":["import { Resolver } from '../Resolver';\r\nimport { Client } from '../../../client/Client';\r\nimport { Command } from '../../Command';\r\nimport { Message } from '../../../types/Message';\r\nimport { Lang } from '../../../localization/Lang';\r\nimport { ResourceLoader } from '../../../types/ResourceLoader';\r\nimport { BaseStrings as s } from '../../../localization/BaseStrings';\r\nimport { Util } from '../../../util/Util';\r\n\r\nexport class CommandGroupResolver extends Resolver\r\n{\r\n\tpublic constructor(client: Client)\r\n\t{\r\n\t\tsuper(client, 'CommandGroup');\r\n\t}\r\n\r\n\tpublic async validate(value: any): Promise<boolean>\r\n\t{\r\n\t\treturn this.client.commands.groups.includes(value);\r\n\t}\r\n\r\n\tpublic async resolve(message: Message, command: Command, name: string, value: string): Promise<string>\r\n\t{\r\n\t\tconst dm: boolean = message.channel.type !== 'text';\r\n\t\tconst lang: string = dm\r\n\t\t\t? this.client.defaultLang\r\n\t\t\t: await message.guild.storage.settings.get('lang')\r\n\t\t\t\t|| this.client.defaultLang;\r\n\r\n\t\tconst res: ResourceLoader = Lang.createResourceLoader(lang);\r\n\t\tconst prefix: string = !dm ? await message.guild.storage.settings.get('prefix') : '';\r\n\t\tconst usage: string = Lang.getCommandInfo(command, lang).usage.replace(/<prefix>/g, prefix);\r\n\r\n\t\tconst result: string = this.client.commands.groups\r\n\t\t\t.find(g => Util.normalize(g).includes(Util.normalize(value)));\r\n\r\n\t\tif (!result)\r\n\t\t\tthrow new Error(res(s.RESOLVE_ERR_RESOLVE_TYPE_TEXT, { name, arg: value, usage, type: 'CommandGroup' }));\r\n\r\n\t\treturn result;\r\n\t}\r\n}\r\n"],"sourceRoot":"../../../../src"}