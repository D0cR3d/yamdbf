{"version":3,"sources":["command/resolvers/base/UserResolver.ts"],"names":[],"mappings":";;AAAA,2CAA8C;AAC9C,0CAAuC;AAIvC,qDAAkD;AAGlD,kBAA0B,SAAQ,mBAAQ;IAEzC,YAAmB,MAAc;QAEhC,KAAK,CAAC,MAAM,EAAE,MAAM,CAAC,CAAC;IACvB,CAAC;IAEM,KAAK,CAAC,QAAQ,CAAC,KAAU;QAE/B,OAAO,KAAK,YAAY,iBAAI,CAAC;IAC9B,CAAC;IAEM,KAAK,CAAC,OAAO,CAAC,OAAgB,EAAE,OAAgB,EAAE,IAAY,EAAE,KAAa;QAEnF,MAAM,IAAI,GAAW,MAAM,WAAI,CAAC,kBAAkB,CAAC,OAAO,CAAC,CAAC;QAC5D,MAAM,GAAG,GAAkB,WAAI,CAAC,mBAAmB,CAAC,IAAI,CAAC,CAAC;QAE1D,MAAM,EAAE,GAAY,OAAO,CAAC,OAAO,CAAC,IAAI,KAAK,MAAM,CAAC;QACpD,MAAM,MAAM,GAAW,CAAC,EAAE,CAAC,CAAC,CAAC,MAAM,OAAO,CAAC,KAAK,CAAC,OAAO,CAAC,QAAQ,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC;QACrF,MAAM,KAAK,GAAW,WAAI,CAAC,cAAc,CAAC,OAAO,EAAE,IAAI,CAAC,CAAC,KAAK,CAAC,OAAO,CAAC,WAAW,EAAE,MAAM,CAAC,CAAC;QAE5F,MAAM,OAAO,GAAW,oBAAoB,CAAC;QAC7C,MAAM,aAAa,GAClB,IAAI,CAAC,EAAE,CAAC,IAAI,CAAC,WAAW,EAAE,CAAC,OAAO,CAAC,cAAc,EAAE,EAAE,CAAC,CAAC;QAExD,IAAI,IAAU,CAAC;QACf,IAAI,OAAO,CAAC,IAAI,CAAC,KAAK,CAAC,EACvB;YACC,IAAI;gBAAE,IAAI,GAAG,MAAM,OAAO,CAAC,MAAM,CAAC,SAAS,CAAC,KAAK,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;aAAE;YACvE,WAAM,GAAE;YACR,IAAI,CAAC,IAAI;gBACR,MAAM,IAAI,KAAK,CAAC,GAAG,CAAC,2BAA2B,CAAC,EAAE,IAAI,EAAE,GAAG,EAAE,KAAK,EAAE,KAAK,EAAE,IAAI,EAAE,MAAM,EAAE,CAAC,CAAC,CAAC;SAC7F;aAED;YACC,MAAM,UAAU,GAAW,aAAa,CAAC,KAAK,CAAC,CAAC;YAChD,IAAI,KAAK,GAA6B,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,CAClE,aAAa,CAAC,CAAC,CAAC,QAAQ,CAAC,CAAC,QAAQ,CAAC,UAAU,CAAC;mBAC1C,aAAa,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,QAAQ,CAAC,UAAU,CAAC,CAAC,CAAC;YAEhD,IAAI,OAAO,CAAC,OAAO,CAAC,IAAI,KAAK,MAAM;gBAClC,KAAK,GAAG,KAAK,CAAC,MAAM,CAAC,IAAI,uBAAU,CAClC,OAAO,CAAC,KAAK,CAAC,OAAO;qBACnB,MAAM,CAAC,CAAC,CAAC,EAAE,CAAC,aAAa,CAAC,CAAC,CAAC,WAAW,CAAC,CAAC,QAAQ,CAAC,UAAU,CAAC,CAAC;qBAC9D,GAAG,CAAC,CAAC,CAAC,EAAE,CAAkB,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC;YAEhD,IAAI,KAAK,CAAC,IAAI,GAAG,CAAC;gBACjB,MAAM,MAAM,CAAC,GAAG,CAAC,iCAAiC,CAAC;oBAClD,IAAI;oBACJ,KAAK;oBACL,KAAK,EAAE,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,KAAK,CAAC,CAAC,GAAG,IAAI,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC;iBAChD,CAAC,CAAC,CAAC;YAEL,IAAI,GAAG,KAAK,CAAC,KAAK,EAAE,CAAC;YACrB,IAAI,CAAC,IAAI;gBACR,MAAM,IAAI,KAAK,CAAC,GAAG,CAAC,6BAA6B,CAAC,EAAE,IAAI,EAAE,GAAG,EAAE,KAAK,EAAE,KAAK,EAAE,IAAI,EAAE,MAAM,EAAE,CAAC,CAAC,CAAC;SAC/F;QACD,OAAO,IAAI,CAAC;IACb,CAAC;CACD;AA3DD,oCA2DC","file":"UserResolver.js","sourcesContent":["import { User, Collection } from 'discord.js';\nimport { Resolver } from '../Resolver';\nimport { Client } from '../../../client/Client';\nimport { Command } from '../../Command';\nimport { Message } from '../../../types/Message';\nimport { Lang } from '../../../localization/Lang';\nimport { ResourceProxy } from '../../../types/ResourceProxy';\n\nexport class UserResolver extends Resolver\n{\n\tpublic constructor(client: Client)\n\t{\n\t\tsuper(client, 'User');\n\t}\n\n\tpublic async validate(value: any): Promise<boolean>\n\t{\n\t\treturn value instanceof User;\n\t}\n\n\tpublic async resolve(message: Message, command: Command, name: string, value: string): Promise<User>\n\t{\n\t\tconst lang: string = await Lang.getLangFromMessage(message);\n\t\tconst res: ResourceProxy = Lang.createResourceProxy(lang);\n\n\t\tconst dm: boolean = message.channel.type !== 'text';\n\t\tconst prefix: string = !dm ? await message.guild.storage.settings.get('prefix') : '';\n\t\tconst usage: string = Lang.getCommandInfo(command, lang).usage.replace(/<prefix>/g, prefix);\n\n\t\tconst idRegex: RegExp = /^(?:<@!?)?(\\d+)>?$/;\n\t\tconst normalizeUser: (text: string) => string =\n\t\t\ttext => text.toLowerCase().replace(/[^a-z0-9#]+/g, '');\n\n\t\tlet user: User;\n\t\tif (idRegex.test(value))\n\t\t{\n\t\t\ttry { user = await message.client.fetchUser(value.match(idRegex)[1]); }\n\t\t\tcatch {}\n\t\t\tif (!user)\n\t\t\t\tthrow new Error(res.RESOLVE_ERR_RESOLVE_TYPE_ID({ name, arg: value, usage, type: 'User' }));\n\t\t}\n\t\telse\n\t\t{\n\t\t\tconst normalized: string = normalizeUser(value);\n\t\t\tlet users: Collection<string, User> = this.client.users.filter(a =>\n\t\t\t\tnormalizeUser(a.username).includes(normalized)\n\t\t\t\t\t|| normalizeUser(a.tag).includes(normalized));\n\n\t\t\tif (message.channel.type === 'text')\n\t\t\t\tusers = users.concat(new Collection(\n\t\t\t\t\tmessage.guild.members\n\t\t\t\t\t\t.filter(a => normalizeUser(a.displayName).includes(normalized))\n\t\t\t\t\t\t.map(a => <[string, User]> [a.id, a.user])));\n\n\t\t\tif (users.size > 1)\n\t\t\t\tthrow String(res.RESOLVE_ERR_MULTIPLE_USER_RESULTS({\n\t\t\t\t\tname,\n\t\t\t\t\tusage,\n\t\t\t\t\tusers: users.map(u => `\\`${u.tag}\\``).join(', ')\n\t\t\t\t}));\n\n\t\t\tuser = users.first();\n\t\t\tif (!user)\n\t\t\t\tthrow new Error(res.RESOLVE_ERR_RESOLVE_TYPE_TEXT({ name, arg: value, usage, type: 'User' }));\n\t\t}\n\t\treturn user;\n\t}\n}\n"],"sourceRoot":"../../../../src"}