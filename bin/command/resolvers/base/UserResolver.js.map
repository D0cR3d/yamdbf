{"version":3,"sources":["command/resolvers/base/UserResolver.ts"],"names":[],"mappings":"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","file":"UserResolver.js","sourcesContent":["import { Resolver } from '../Resolver';\r\nimport { Client } from '../../../client/Client';\r\nimport { Command } from '../../Command';\r\nimport { Message } from '../../../types/Message';\r\nimport { Lang } from '../../../localization/Lang';\r\nimport { ResourceLoader } from '../../../types/ResourceLoader';\r\nimport { BaseStrings as s } from '../../../localization/BaseStrings';\r\nimport { User, Collection } from 'discord.js';\r\n\r\nexport class UserResolver extends Resolver\r\n{\r\n\tpublic constructor(client: Client)\r\n\t{\r\n\t\tsuper(client, 'User');\r\n\t}\r\n\r\n\tpublic async validate(value: any): Promise<boolean>\r\n\t{\r\n\t\treturn value instanceof User;\r\n\t}\r\n\r\n\tpublic async resolve(message: Message, command: Command, name: string, value: string): Promise<User>\r\n\t{\r\n\t\tconst dm: boolean = message.channel.type !== 'text';\r\n\t\tconst lang: string = dm\r\n\t\t\t? this.client.defaultLang\r\n\t\t\t: await message.guild.storage.settings.get('lang')\r\n\t\t\t\t|| this.client.defaultLang;\r\n\r\n\t\tconst res: ResourceLoader = Lang.createResourceLoader(lang);\r\n\t\tconst prefix: string = !dm ? await message.guild.storage.settings.get('prefix') : '';\r\n\t\tconst usage: string = Lang.getCommandInfo(command, lang).usage.replace(/<prefix>/g, prefix);\r\n\r\n\t\tconst idRegex: RegExp = /^(?:<@!?)?(\\d+)>?$/;\r\n\t\tconst normalizeUser: (text: string) => string =\r\n\t\t\ttext => text.toLowerCase().replace(/[^a-z0-9#]+/g, '');\r\n\r\n\t\tlet user: User;\r\n\t\tif (idRegex.test(value))\r\n\t\t{\r\n\t\t\ttry { user = await message.client.fetchUser(value.match(idRegex)[1]); }\r\n\t\t\tcatch {}\r\n\t\t\tif (!user) throw new Error(\r\n\t\t\t\tres(s.RESOLVE_ERR_RESOLVE_TYPE_ID, { name, arg: value, usage, type: 'User' }));\r\n\t\t}\r\n\t\telse\r\n\t\t{\r\n\t\t\tconst normalized: string = normalizeUser(value);\r\n\t\t\tlet users: Collection<string, User> = this.client.users.filter(a =>\r\n\t\t\t\tnormalizeUser(a.username).includes(normalized)\r\n\t\t\t\t\t|| normalizeUser(a.tag).includes(normalized));\r\n\r\n\t\t\tif (message.channel.type === 'text')\r\n\t\t\t\tusers = users.concat(new Collection(\r\n\t\t\t\t\tmessage.guild.members\r\n\t\t\t\t\t\t.filter(a => normalizeUser(a.displayName).includes(normalized))\r\n\t\t\t\t\t\t.map(a => <[string, User]> [a.id, a.user])));\r\n\r\n\t\t\tif (users.size > 1)\r\n\t\t\t\tthrow String(res(s.RESOLVE_ERR_MULTIPLE_USER_RESULTS,\r\n\t\t\t\t\t{ name, usage, users: users.map(u => `\\`${u.tag}\\``).join(', ') }));\r\n\r\n\t\t\tuser = users.first();\r\n\t\t\tif (!user) throw new Error(\r\n\t\t\t\tres(s.RESOLVE_ERR_RESOLVE_TYPE_TEXT, { name, arg: value, usage, type: 'User' }));\r\n\t\t}\r\n\t\treturn user;\r\n\t}\r\n}\r\n"],"sourceRoot":"../../../../src"}